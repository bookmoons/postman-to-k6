/* eslint-disable no-template-curly-in-string */

import test from 'ava'
import convertFile from 'convert/file'

test('minimal', async t => {
  const [ main ] = await convertFile('test/material/2/minimal.json')
  t.is(main, `// No HTTP/HTTPS transactions have been recorded`)
})

test('request', async t => {
  const [ main ] = await convertFile('test/material/2/request.json')
  t.is(main, `// Auto-generated by the Load Impact converter

import "./libs/shim/core.js";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options
});

export default function() {
  postman[Request]({
    name: "TestRequest",
    method: "GET",
    address: "http://example.com"
  });
}
`)
})

test('raw body', async t => {
  const [ main ] = await convertFile('test/material/2/body-raw.json')
  t.is(main, `// Auto-generated by the Load Impact converter

import "./libs/shim/core.js";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options
});

export default function() {
  postman[Request]({
    name: "TestRequest",
    method: "POST",
    address: "http://example.com",
    data: "line1\\nline2\\nline3\\n"
  });
}
`)
})

test('form body', async t => {
  const [ main ] = await convertFile('test/material/2/body-form.json')
  t.is(main, `// Auto-generated by the Load Impact converter

import "./libs/shim/core.js";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options
});

export default function() {
  postman[Request]({
    name: "TestRequest",
    method: "POST",
    address: "http://example.com",
    data: { first: "one", second: "two", third: "three" }
  });
}
`)
})

test('url body', async t => {
  const [ main ] = await convertFile('test/material/2/body-url.json')
  t.is(main, `// Auto-generated by the Load Impact converter

import "./libs/shim/core.js";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options
});

export default function() {
  postman[Request]({
    name: "TestRequest",
    method: "POST",
    address: "http://example.com",
    data: { first: "one", second: "two", third: "three" },
    headers: {
      "Content-Type": "application/x-www-form-urlencoded"
    }
  });
}
`)
})

test('no body alternate', async t => {
  const [ main ] = await convertFile('test/material/2.1/no-body-alternate.json')
  t.is(main, `// Auto-generated by the Load Impact converter

import "./libs/shim/core.js";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options
});

export default function() {
  postman[Request]({
    name: "TestRequest",
    method: "GET",
    address: "http://example.com"
  });
}
`)
})

test('iterations', async t => {
  const [ main ] = await convertFile('test/material/2/request.json', {
    iterations: 25
  })
  t.is(main, `// Auto-generated by the Load Impact converter

import "./libs/shim/core.js";

export let options = { maxRedirects: 4, iterations: 25 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options
});

export default function() {
  postman[Request]({
    name: "TestRequest",
    method: "GET",
    address: "http://example.com"
  });
}
`)
})

test('separate requests', async t => {
  const [ main, requests ] = await convertFile(
    'test/material/2/request-separate.json',
    { separate: true }
  )
  t.is(main, `// Auto-generated by the Load Impact converter

import "./libs/shim/core.js";
import "./requests/TestRequest1.js";
import "./requests/TestRequest2.js";

export let options = { maxRedirects: 4 };

const NamedRequest = Symbol.for("named");
postman[Symbol.for("initial")]({
  options
});

export default function() {
  postman[NamedRequest]("Test Request 1");
  postman[NamedRequest]("Test Request 2");
}
`)
  t.is(requests['TestRequest1.js'], `postman[Symbol.for("define")]({
  name: "Test Request 1",
  method: "GET",
  address: "http://1.example.com"
});
`)
  t.is(requests['TestRequest2.js'], `postman[Symbol.for("define")]({
  name: "Test Request 2",
  method: "GET",
  address: "http://2.example.com"
});
`)
})

test('separate requests collision', async t => {
  const [ main, requests ] = await convertFile(
    'test/material/2/request-separate-collision.json',
    { separate: true }
  )
  t.is(main, `// Auto-generated by the Load Impact converter

import "./libs/shim/core.js";
import "./requests/TestRequest1.js";
import "./requests/TestRequest1.A.js";
import "./requests/TestRequest1.B.js";

export let options = { maxRedirects: 4 };

const NamedRequest = Symbol.for("named");
postman[Symbol.for("initial")]({
  options
});

export default function() {
  postman[NamedRequest]("Test Request 1");
  postman[NamedRequest]("Test Request 1", 2);
  postman[NamedRequest]("Test Request 1", 3);
}
`)
  t.is(requests['TestRequest1.js'], `postman[Symbol.for("define")]({
  name: "Test Request 1",
  method: "GET",
  address: "http://1.example.com"
});
`)
  t.is(requests['TestRequest1.A.js'], `postman[Symbol.for("define")]({
  name: "Test Request 1",
  method: "GET",
  address: "http://2.example.com"
});
`)
  t.is(requests['TestRequest1.B.js'], `postman[Symbol.for("define")]({
  name: "Test Request 1",
  method: "GET",
  address: "http://3.example.com"
});
`)
})
