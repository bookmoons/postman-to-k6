/* eslint-disable no-template-curly-in-string */

import test from 'ava'
import convertFile from 'convert/file'

test('global', async t => {
  const { main } = await convertFile('test/material/2/var-global.json', {
    globals: 'test/material/2/globals.json'
  })
  t.is(main, `// Auto-generated by the Load Impact converter

import "./libs/shim/core.js";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  global: {
    first: "one",
    second: "two",
    third: "three"
  }
});

export default function() {
  postman[Request]({
    name: "TestRequest",
    method: "GET",
    address: "http://{{first}}.{{third}}/"
  });
}
`)
})

test('collection', async t => {
  const { main } = await convertFile('test/material/2/var-collection.json')
  t.is(main, `// Auto-generated by the Load Impact converter

import "./libs/shim/core.js";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  collection: {
    domain: "example.com",
    machine: 573
  }
});

export default function() {
  postman[Request]({
    name: "TestRequest",
    method: "GET",
    address: "http://{{machine}}.{{domain}}/"
  });
}
`)
})

test('environment', async t => {
  const { main } = await convertFile('test/material/2/var-environment.json', {
    environment: 'test/material/2/environment.json'
  })
  t.is(main, `// Auto-generated by the Load Impact converter

import "./libs/shim/core.js";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  environment: {
    first: "one",
    second: "two",
    third: "three"
  }
});

export default function() {
  postman[Request]({
    name: "TestRequest",
    method: "GET",
    address: "http://{{first}}.{{third}}/"
  });
}
`)
})

test('data json', async t => {
  const { main } = await convertFile('test/material/2/var-data-json.json', {
    json: 'test/material/2/data-json.json'
  })
  t.is(main, `// Auto-generated by the Load Impact converter

import "./libs/shim/core.js";

export let options = { maxRedirects: 4 };

const file = (() => {
  // Load data file
  const text = open("./data.json");
  const rows = JSON.parse(text);
  return rows;
})();
options.iterations = file.length;

const Iteration = Symbol.for("iteration");
const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  data: file
});

export default function() {
  postman[Iteration]();

  postman[Request]({
    name: "TestRequest",
    method: "GET",
    address: "http://{{first}}.{{third}}/"
  });
}
`)
})

test('data csv', async t => {
  const { main } = await convertFile('test/material/2/var-data-csv.json', {
    csv: 'test/material/2/data-csv.csv'
  })
  t.is(main, `// Auto-generated by the Load Impact converter

import "./libs/shim/core.js";
import { papaparse } from "./libs/compat.js";

export let options = { maxRedirects: 4 };

const file = (() => {
  // Load data file
  const text = open("./data.csv");
  const rows = papaparse.parse(text, { header: true }).data;
  return rows;
})();
options.iterations = file.length;

const Iteration = Symbol.for("iteration");
const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  data: file
});

export default function() {
  postman[Iteration]();

  postman[Request]({
    name: "TestRequest",
    method: "GET",
    address: "http://{{first}}.{{third}}/"
  });
}
`)
})

test('data custom iterations', async t => {
  const { main } = await convertFile('test/material/2/var-data-json.json', {
    json: 'test/material/2/data-json.json',
    iterations: 27
  })
  t.is(main, `// Auto-generated by the Load Impact converter

import "./libs/shim/core.js";

export let options = { maxRedirects: 4, iterations: 27 };

const file = (() => {
  // Load data file
  const text = open("./data.json");
  const rows = JSON.parse(text);
  return rows;
})();

const Iteration = Symbol.for("iteration");
const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  data: file
});

export default function() {
  postman[Iteration]();

  postman[Request]({
    name: "TestRequest",
    method: "GET",
    address: "http://{{first}}.{{third}}/"
  });
}
`)
})

test('address start', async t => {
  const { main } = await convertFile('test/material/2/var-address-start.json')
  t.is(main, `// Auto-generated by the Load Impact converter

import "./libs/shim/core.js";
import "./libs/shim/urijs.js";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  collection: {
    domain: "example.com",
    machine: 573
  }
});

export default function() {
  postman[Request]({
    name: "TestRequest",
    method: "GET",
    address: "{{machine}}.{{domain}}"
  });
}
`)
})
